global:
  enabled: true
  tlsDisable: false
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi
      cpu: 500m

affinity: ""

injector:
  enabled: true

server:
  # Set the image for the vault server
  image:
    repository: "hashicorp/vault"
    tag: "1.17.3"
  
  # Set the resources for the vault server
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 1Gi
      cpu: 1
  
  # Set the readiness probe for the vault server
  readinessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
    scheme: HTTPS
  livenessProbe:
    enabled: true
    path: "/v1/sys/health?sealedcode=204&standbycode=204&uninitcode=204"
    scheme: HTTPS
    initialDelaySeconds: 60

  # Set the extra volumes for the vault server these will be exposed in the path /vault/userconfig/<name>
  extraVolumes:
    - type: secret
      name: vault-internal-tls
    - type: secret
      name: vault-ca-tls

  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-ca-tls/ca.crt
    VAULT_TLS_CERT: /vault/userconfig/vault-internal-tls/tls.crt
    VAULT_TLS_KEY: /vault/userconfig/vault-internal-tls/tls.key

  dataStorage:
    enabled: true
    size: 5Gi

  auditStorage:
    enabled: false

  standalone:
    enabled: false

  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true
    
      config: |
        ui = true
        cluster_name = "prd-dct-vault"
        api_addr = "http://POD_IP:8200"
      
        listener "tcp" {
          tls_disable = 0
          address = "[::]:8200"
          cluster_address = "[::]:8201"

          tls_client_ca_file = "/vault/userconfig/vault-ca-tls/ca.crt"
          tls_cert_file = "/vault/userconfig/vault-internal-tls/tls.crt"
          tls_key_file = "/vault/userconfig/vault-internal-tls/tls.key"

          x_forwarded_for_authorized_addrs = "10.0.0.0/8"
          x_forwarded_for_reject_not_authorized = "false"
          x_forwarded_for_reject_not_present = "false"
          x_forwarded_for_hop_skips = 1
        }

        service_registration "kubernetes" {
          namespace      = "vault-infra"
        }

        storage "raft" {
          path = "/vault/data"
        
          retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_tls_servername = "vault"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-internal-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-internal-tls/tls.key"
          }
    
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_tls_servername = "vault"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-internal-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-internal-tls/tls.key"
          }
    
          retry_join {
            leader_api_addr = "https://vault-2.vault-internal:8200"
            leader_tls_servername = "vault"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-internal-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-internal-tls/tls.key"
          }

          autopilot {
            cleanup_dead_servers = "true"
            last_contact_threshold = "200ms"
            last_contact_failure_threshold = "10m"
            max_trailing_logs = 250000
            min_quorum = 3
            server_stabilization_time = "10s"
          }
        }

ui:
  enabled: true
